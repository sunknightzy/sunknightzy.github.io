{"title":"分布式ID设计方案","uid":"78eda1e73784e2bed9dff22f7b33de09","slug":"分布式ID设计方案","date":"2017-08-25T05:04:29.000Z","updated":"2019-05-03T08:24:49.000Z","comments":true,"path":"api/articles/分布式ID设计方案.json","keywords":null,"cover":"https://raw.githubusercontent.com/sunknightzy/picsee/main/Picsee/abnerworks.Typora/image-1721273128294-XKUAxI.png","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>是的，之前部门布置的任务完成的不错，老大继续给我分配了一个设计分布式ID方案的任务，不说了，加班加班~</p>\n<p>在一个分布式系统中，如何保证订单ID的全局唯一性？</p></blockquote>\n<h2 id=\"核心要点\"><a href=\"#核心要点\" class=\"headerlink\" title=\"核心要点\"></a>核心要点</h2><p>针对这个问题，我会从以下几点考虑：</p>\n<p>1、可以使用<strong>UUID&#x2F;GUID</strong>方案，它能保证全球范围内的唯一性，无需中心化协调，但缺点是长度较长且无序。</p>\n<p>2、<strong>雪花算法(Snowflake)<strong>是一个很好的选择，它由<code>时间戳+机器ID+序列号</code>组成，</strong>既保证了唯一性又保证了有序性</strong>，非常适合订单系统。</p>\n<p>3、对于大型系统，我们可以考虑<strong>号段模式</strong>，即集中式ID生成器预分配一段ID给各服务，减少网络请求。</p>\n<p>4、还有<strong>Redis自增</strong>和<strong>数据库自增策略</strong>等也是常见方案，但需注意<strong>高可用问题</strong>。</p>\n<p>实际项目中，我会根据具体的业务需求、数据量和性能要求选择最合适的方案，通常<strong>雪花算法</strong>是最均衡的选择</p>\n<h2 id=\"详细解析\"><a href=\"#详细解析\" class=\"headerlink\" title=\"详细解析\"></a>详细解析</h2><h3 id=\"全局唯一ID的核心需求-🎯\"><a href=\"#全局唯一ID的核心需求-🎯\" class=\"headerlink\" title=\"全局唯一ID的核心需求 🎯\"></a>全局唯一ID的核心需求 🎯</h3><p>做好订单ID设计，我们需要关注这几点：</p>\n<ul>\n<li><p>全局唯一性：确保在整个分布式系统中不会出现重复 ID</p>\n</li>\n<li><p>高性能：生成过程要快，不能成为系统瓶颈</p>\n</li>\n<li><p>高可用：ID 生成器不能有单点故障</p>\n</li>\n<li><p>趋势递增：对于订单系统，通常希望 ID 保持递增趋势，便于排序和分析</p>\n</li>\n</ul>\n<h3 id=\"常见解决方案分析-🛠️\"><a href=\"#常见解决方案分析-🛠️\" class=\"headerlink\" title=\"常见解决方案分析 🛠️\"></a>常见解决方案分析 🛠️</h3><h4 id=\"1-UUID-GUID-📌\"><a href=\"#1-UUID-GUID-📌\" class=\"headerlink\" title=\"1. UUID&#x2F;GUID 📌\"></a>1. UUID&#x2F;GUID 📌</h4><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme\" style=\"background-color: #263238\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">String</span><span style=\"color: #EEFFFF\"> uuid </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #EEFFFF\"> UUID</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">randomUUID</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">toString</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">replace</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">-</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&quot;&quot;</span><span style=\"color: #89DDFF\">);</span></span></code></pre></div><p>UUID是最简单直接的方案，但存在几个问题：</p>\n<ul>\n<li><p>长度过长，16字节</p>\n</li>\n<li><p>无序性导致索引效率低下</p>\n</li>\n<li><p>用户体验不友好，不容易记忆和沟通</p>\n</li>\n</ul>\n<h4 id=\"2-雪花算法-Snowflake-❄️\"><a href=\"#2-雪花算法-Snowflake-❄️\" class=\"headerlink\" title=\"2. 雪花算法(Snowflake) ❄️\"></a>2. 雪花算法(Snowflake) ❄️</h4><p>雪花算法是Twitter开源的分布式ID生成算法，核心思想是：</p>\n<ul>\n<li><p>1位符号位，固定为0</p>\n</li>\n<li><p>41位时间戳，精确到毫秒</p>\n</li>\n<li><p>10位机器ID，可以部署在1024个节点</p>\n</li>\n<li><p>12位序列号，同一毫秒内可生成4096个ID</p>\n</li>\n</ul>\n<p>优势非常明显：</p>\n<ul>\n<li><p>趋势自增，满足订单排序需求</p>\n</li>\n<li><p>生成效率高，不依赖第三方存储</p>\n</li>\n<li><p>ID长度适中</p>\n</li>\n<li><p>可以根据ID反解析出时间和机器信息，便于问题排查</p>\n</li>\n</ul>\n<p>实现示例：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme\" style=\"background-color: #263238\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #FFCB6B\">SnowflakeIdGenerator</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">final</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">long</span><span style=\"color: #EEFFFF\"> workerId</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">final</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">long</span><span style=\"color: #EEFFFF\"> datacenterId</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">long</span><span style=\"color: #EEFFFF\"> sequence </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #F78C6C\">0L</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #546E7A; font-style: italic\">// 时间起点 (2017-01-01)</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">final</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">long</span><span style=\"color: #EEFFFF\"> twepoch </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #F78C6C\">1483200000000L</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #546E7A; font-style: italic\">// 机器ID位数，数据中心ID位数，序列号位数</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">final</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">long</span><span style=\"color: #EEFFFF\"> workerIdBits </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #F78C6C\">5L</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">final</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">long</span><span style=\"color: #EEFFFF\"> datacenterIdBits </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #F78C6C\">5L</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">final</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">long</span><span style=\"color: #EEFFFF\"> sequenceBits </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #F78C6C\">12L</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #546E7A; font-style: italic\">// 各部分最大值</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">final</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">long</span><span style=\"color: #EEFFFF\"> maxWorkerId </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #F78C6C\">1L</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">^</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">(-</span><span style=\"color: #F78C6C\">1L</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #EEFFFF\"> workerIdBits</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">final</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">long</span><span style=\"color: #EEFFFF\"> maxDatacenterId </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #F78C6C\">1L</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">^</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">(-</span><span style=\"color: #F78C6C\">1L</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #EEFFFF\"> datacenterIdBits</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">final</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">long</span><span style=\"color: #EEFFFF\"> sequenceMask </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #F78C6C\">1L</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">^</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">(-</span><span style=\"color: #F78C6C\">1L</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #EEFFFF\"> sequenceBits</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #546E7A; font-style: italic\">// 各部分偏移量</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">final</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">long</span><span style=\"color: #EEFFFF\"> workerIdShift </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #EEFFFF\"> sequenceBits</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">final</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">long</span><span style=\"color: #EEFFFF\"> datacenterIdShift </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #EEFFFF\"> sequenceBits </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #EEFFFF\"> workerIdBits</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">final</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">long</span><span style=\"color: #EEFFFF\"> timestampLeftShift </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #EEFFFF\"> sequenceBits </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #EEFFFF\"> workerIdBits </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #EEFFFF\"> datacenterIdBits</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">long</span><span style=\"color: #EEFFFF\"> lastTimestamp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #F78C6C\">1L</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #546E7A; font-style: italic\">// 构造函数</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #82AAFF\">SnowflakeIdGenerator</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">long</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #EEFFFF; font-style: italic\">workerId</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">long</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #EEFFFF; font-style: italic\">datacenterId</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #EEFFFF\">workerId </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #EEFFFF\"> maxWorkerId </span><span style=\"color: #89DDFF\">||</span><span style=\"color: #EEFFFF\"> workerId </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">            </span><span style=\"color: #89DDFF; font-style: italic\">throw</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #82AAFF\">IllegalArgumentException</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Worker ID can&#39;t be greater than </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #EEFFFF\"> maxWorkerId </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\"> or less than 0</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #EEFFFF\">datacenterId </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #EEFFFF\"> maxDatacenterId </span><span style=\"color: #89DDFF\">||</span><span style=\"color: #EEFFFF\"> datacenterId </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">            </span><span style=\"color: #89DDFF; font-style: italic\">throw</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #82AAFF\">IllegalArgumentException</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Datacenter ID can&#39;t be greater than </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #EEFFFF\"> maxDatacenterId </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\"> or less than 0</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">        </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #EEFFFF\">workerId </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #EEFFFF\"> workerId</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">        </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #EEFFFF\">datacenterId </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #EEFFFF\"> datacenterId</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #546E7A; font-style: italic\">// 生成下一个ID</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">synchronized</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">long</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #82AAFF\">nextId</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">        </span><span style=\"color: #C792EA\">long</span><span style=\"color: #EEFFFF\"> timestamp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #82AAFF\">timeGen</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #EEFFFF\">timestamp </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #EEFFFF\"> lastTimestamp</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">            </span><span style=\"color: #89DDFF; font-style: italic\">throw</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #82AAFF\">RuntimeException</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Clock moved backwards. Refusing to generate id</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #EEFFFF\">lastTimestamp </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #EEFFFF\"> timestamp</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">            sequence </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #EEFFFF\">sequence </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&amp;</span><span style=\"color: #EEFFFF\"> sequenceMask</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #EEFFFF\">sequence </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">                timestamp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #82AAFF\">tilNextMillis</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #EEFFFF\">lastTimestamp</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">        </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">            sequence </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #F78C6C\">0L</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">        lastTimestamp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #EEFFFF\"> timestamp</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">((</span><span style=\"color: #EEFFFF\">timestamp </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #EEFFFF\"> twepoch</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #EEFFFF\"> timestampLeftShift</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">|</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">                </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #EEFFFF\">datacenterId </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #EEFFFF\"> datacenterIdShift</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">|</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">                </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #EEFFFF\">workerId </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #EEFFFF\"> workerIdShift</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">|</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">                sequence</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">long</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #82AAFF\">tilNextMillis</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">long</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #EEFFFF; font-style: italic\">lastTimestamp</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">        </span><span style=\"color: #C792EA\">long</span><span style=\"color: #EEFFFF\"> timestamp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #82AAFF\">timeGen</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #EEFFFF\">timestamp </span><span style=\"color: #89DDFF\">&lt;=</span><span style=\"color: #EEFFFF\"> lastTimestamp</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">            timestamp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #82AAFF\">timeGen</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #EEFFFF\"> timestamp</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">long</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #82AAFF\">timeGen</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #EEFFFF\"> System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">currentTimeMillis</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><h4 id=\"3-号段模式-🔢\"><a href=\"#3-号段模式-🔢\" class=\"headerlink\" title=\"3. 号段模式 🔢\"></a>3. 号段模式 🔢</h4><p>号段模式是一种优化的中心化ID分配策略，核心思想是：</p>\n<ul>\n<li><p>中心服务一次性分配一段ID给应用服务器</p>\n</li>\n<li><p>应用服务器在内存中分配这段ID，用完再去申请</p>\n</li>\n<li><p>减少了频繁网络请求，提高了性能</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/sunknightzy/picsee/main/Picsee/abnerworks.Typora/1748336533114-5bec8e86-7364-4a36-ae8e-a54ee864df0c-TyvRFj.png\"></p>\n<h4 id=\"4-其他方案比较-📊\"><a href=\"#4-其他方案比较-📊\" class=\"headerlink\" title=\"4. 其他方案比较 📊\"></a>4. 其他方案比较 📊</h4><table>\n<thead>\n<tr>\n<th>方案</th>\n<th>优点</th>\n<th>缺点</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数据库自增ID</td>\n<td>简单易实现，有序</td>\n<td>单点故障风险，性能瓶颈</td>\n<td>小型系统，数据量不大</td>\n</tr>\n<tr>\n<td>Redis自增</td>\n<td>性能较好，实现简单</td>\n<td>需要考虑持久化，可靠性问题</td>\n<td>中型系统，对性能有一定要求</td>\n</tr>\n<tr>\n<td>雪花算法</td>\n<td>高性能，无单点，趋势递增</td>\n<td>需要解决时钟回退问题</td>\n<td>大型分布式系统</td>\n</tr>\n<tr>\n<td>UUID</td>\n<td>简单，无需中心化服务</td>\n<td>无序，长度长，索引效率低</td>\n<td>对ID格式无特殊要求的场景</td>\n</tr>\n<tr>\n<td>号段模式</td>\n<td>减少网络请求，高性能</td>\n<td>实现稍复杂，需要集中管理</td>\n<td>大型系统，对性能要求高</td>\n</tr>\n</tbody></table>\n<h3 id=\"实战建议-🚀\"><a href=\"#实战建议-🚀\" class=\"headerlink\" title=\"实战建议 🚀\"></a>实战建议 🚀</h3><p>在项目中，我们选择了雪花算法作为订单ID生成方案，并做了以下改进：</p>\n<ol>\n<li>解决时钟回拨问题 - 加入了时钟回拨检测机制，如果发现回拨，会等待一段时间或报警</li>\n<li>机器ID分配 - 使用Zookeeper自动分配机器ID，避免手动配置</li>\n<li>每秒可生成409.6万个ID，完全满足高并发需求</li>\n</ol>\n<p>当你遇到这个问题时，我建议：</p>\n<ol>\n<li>分析你的业务需求：ID是否需要有序？数据规模有多大？</li>\n<li>评估系统的可用性要求和性能需求</li>\n<li>中小型系统可以考虑Redis+Lua或改进的雪花算法</li>\n<li>大型系统建议使用雪花算法或号段模式</li>\n</ol>\n<p>核心是，<strong>不要过度设计</strong>，选择满足需求的最简方案，同时预留扩展空间，这样才能既满足业务需求，又能保证系统的健壮性和可维护性。</p>\n","feature":true,"text":"文章描述了Java中实现分布式ID的几种设计方案, 以及他们的优缺点...","permalink":"/post/分布式ID设计方案","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"分布式","slug":"分布式","count":2,"path":"api/categories/分布式.json"}],"tags":[{"name":"分布式","slug":"分布式","count":2,"path":"api/tags/分布式.json"},{"name":"分布式ID","slug":"分布式ID","count":1,"path":"api/tags/分布式ID.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E8%A6%81%E7%82%B9\"><span class=\"toc-text\">核心要点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">详细解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E5%94%AF%E4%B8%80ID%E7%9A%84%E6%A0%B8%E5%BF%83%E9%9C%80%E6%B1%82-%F0%9F%8E%AF\"><span class=\"toc-text\">全局唯一ID的核心需求 🎯</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E5%88%86%E6%9E%90-%F0%9F%9B%A0%EF%B8%8F\"><span class=\"toc-text\">常见解决方案分析 🛠️</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-UUID-GUID-%F0%9F%93%8C\"><span class=\"toc-text\">1. UUID&#x2F;GUID 📌</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95-Snowflake-%E2%9D%84%EF%B8%8F\"><span class=\"toc-text\">2. 雪花算法(Snowflake) ❄️</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%8F%B7%E6%AE%B5%E6%A8%A1%E5%BC%8F-%F0%9F%94%A2\"><span class=\"toc-text\">3. 号段模式 🔢</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E5%85%B6%E4%BB%96%E6%96%B9%E6%A1%88%E6%AF%94%E8%BE%83-%F0%9F%93%8A\"><span class=\"toc-text\">4. 其他方案比较 📊</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E6%88%98%E5%BB%BA%E8%AE%AE-%F0%9F%9A%80\"><span class=\"toc-text\">实战建议 🚀</span></a></li></ol></li></ol>","author":{"name":"GlassCat","slug":"blog-author","avatar":"/img/avatar.png","link":"/","description":"《论语·为政》<br/>吾尝终日不食，终夜不寝，以思无益，不如学也<br/>--孔子--","socials":{"github":"https://github.com/sunknightzy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/someaware","csdn":"","juejin":"","customs":{"mail":{"icon":"/svg/mail.svg","link":"mailto:593739859@qq.com"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"MacBook 后端环境搭建","uid":"ebab0b3cf4c39bee5f017078a6c91559","slug":"MacBook-后端环境搭建","date":"2018-03-31T03:36:42.000Z","updated":"2018-04-01T05:36:42.000Z","comments":true,"path":"api/articles/MacBook-后端环境搭建.json","keywords":null,"cover":"https://raw.githubusercontent.com/sunknightzy/picsee/main/Picsee/abnerworks.Typora/coverbZ9Hhj-CJ6c50.png","text":"这篇文章主要介绍了在 MacBook 上搭建后端开发环境的详细步骤，包括终端工具、包管理器、版本控制工具、开发工具及插件的配置，以及通过 Docker 安装中间件的方法...","permalink":"/post/MacBook-后端环境搭建","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"MacBook","slug":"MacBook","count":3,"path":"api/categories/MacBook.json"},{"name":"环境搭建","slug":"MacBook/环境搭建","count":3,"path":"api/categories/MacBook/环境搭建.json"}],"tags":[{"name":"MacBook","slug":"MacBook","count":3,"path":"api/tags/MacBook.json"},{"name":"环境搭建","slug":"环境搭建","count":3,"path":"api/tags/环境搭建.json"}],"author":{"name":"GlassCat","slug":"blog-author","avatar":"/img/avatar.png","link":"/","description":"《论语·为政》<br/>吾尝终日不食，终夜不寝，以思无益，不如学也<br/>--孔子--","socials":{"github":"https://github.com/sunknightzy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/someaware","csdn":"","juejin":"","customs":{"mail":{"icon":"/svg/mail.svg","link":"mailto:593739859@qq.com"}}}},"feature":true},"next_post":{"title":"分布式锁的三种实现方案","uid":"109296d43a046ab98a4514702e34310a","slug":"分布式锁的三种实现方案","date":"2017-08-05T05:04:29.000Z","updated":"2019-06-03T04:34:29.000Z","comments":true,"path":"api/articles/分布式锁的三种实现方案.json","keywords":null,"cover":"https://raw.githubusercontent.com/sunknightzy/picsee/main/Picsee/abnerworks.Typora/images-GlLiWS.jpeg","text":"文章描述了Java中实现分布式锁的三种方案,以及他们的优缺点...","permalink":"/post/分布式锁的三种实现方案","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"分布式","slug":"分布式","count":2,"path":"api/categories/分布式.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":2,"path":"api/tags/MySQL.json"},{"name":"Zookeeper","slug":"Zookeeper","count":2,"path":"api/tags/Zookeeper.json"},{"name":"Redis","slug":"Redis","count":2,"path":"api/tags/Redis.json"},{"name":"分布式","slug":"分布式","count":2,"path":"api/tags/分布式.json"},{"name":"分布式锁","slug":"分布式锁","count":1,"path":"api/tags/分布式锁.json"}],"author":{"name":"GlassCat","slug":"blog-author","avatar":"/img/avatar.png","link":"/","description":"《论语·为政》<br/>吾尝终日不食，终夜不寝，以思无益，不如学也<br/>--孔子--","socials":{"github":"https://github.com/sunknightzy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/someaware","csdn":"","juejin":"","customs":{"mail":{"icon":"/svg/mail.svg","link":"mailto:593739859@qq.com"}}}},"feature":true}}